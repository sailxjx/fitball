// Generated by CoffeeScript 1.4.0
(function() {
  var fitball;

  fitball = (function() {

    function fitball() {
      this.mcList = [];
      this.radius = 120;
      this.dtr = Math.PI / 180;
      this.maxEles = 20;
      this.size = 250;
      this.tspeed = 10;
      this.d = 300;
      this.lasta = 1;
      this.lastb = 1;
    }

    fitball.prototype.roll = function() {
      var active, i, mouseX, mouseY, tag, update, vessel, _i, _ref,
        _this = this;
      i = 0;
      mouseX = 0;
      mouseY = 0;
      active = false;
      this.vessel = document.getElementById('vessel');
      this.fitEles = this.vessel.getElementsByTagName('a');
      this.fitEleLength = this.fitEles.length;
      for (i = _i = 0, _ref = this.fitEleLength; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        tag = {};
        tag.offsetWidth = this.fitEles[i].offsetWidth;
        tag.offsetHeight = this.fitEles[i].offsetHeight;
        this.mcList.push(tag);
      }
      this.sineCosine(0, 0, 0);
      this.positionAll();
      vessel = this.vessel;
      this.vessel.onmouseover = function() {
        return active = true;
      };
      this.vessel.onmouseover = function() {
        return active = false;
      };
      this.vessel.onmousemove = function(e) {
        e = window.event || e;
        mouseX = e.clientX - (vessel.offsetLeft + vessel.offsetWidth / 2);
        mouseY = e.clientY - (vessel.offsetTop + vessel.offsetHeight / 2);
        mouseX /= 5;
        return mouseY /= 5;
      };
      update = function() {
        var a, b, c, max, per, rx1, rx2, rx3, ry1, ry2, ry3, rz1, rz2, rz3, _j;
        a = 0;
        b = 0;
        c = 0;
        if (active) {
          a = (-Math.min(Math.max(-mouseY, -_this.size), _this.size) / _this.radius) * _this.tspeed;
          b = (Math.min(Math.max(-mouseX, -_this.size), _this.size) / _this.radius) * _this.tspeed;
        } else {
          a = _this.lasta * 0.98;
          b = _this.lastb * 0.98;
        }
        _this.lasta = a;
        _this.lastb = b;
        if (Math.abs(a) <= 0.01 && Math.abs(b) <= 0.01) {
          return false;
        }
        _this.sineCosine(a, b, c);
        max = _this.mcList.length;
        for (i = _j = 0; 0 <= max ? _j < max : _j > max; i = 0 <= max ? ++_j : --_j) {
          rx1 = _this.mcList[i].cx;
          ry1 = _this.mcList[i].cy * _this.ca + _this.mcList[i].cz * (-_this.sa);
          rz1 = _this.mcList[i].cy * _this.sa + _this.mcList[i].cz * _this.ca;
          rx2 = rx1 * _this.cb + rz1 * _this.sb;
          ry2 = ry1;
          rz2 = rx1 * (-_this.sb) + rz1 * _this.cb;
          rx3 = rx2 * _this.cc + ry2 * (-_this.sc);
          ry3 = rx2 * _this.sc + ry2 * _this.cc;
          rz3 = rz2;
          _this.mcList[i].cx = rx3;
          _this.mcList[i].cy = ry3;
          _this.mcList[i].cz = rz3;
          per = _this.d / (_this.d + rz3);
          _this.mcList[i].x = rx3 * per - 2;
          _this.mcList[i].y = ry3 * per;
          _this.mcList[i].scale = per;
          _this.mcList[i].alpha = (per - 0.6) * 10 / 6;
        }
        _this.doPosition();
        return _this.depthSort();
      };
      return setInterval(update, 30);
    };

    fitball.prototype.doPosition = function() {
      var i, l, max, t, _i, _results;
      l = this.vessel.offsetWidth / 2;
      t = this.vessel.offsetHeight / 2;
      max = this.mcList.length;
      _results = [];
      for (i = _i = 0; 0 <= max ? _i < max : _i > max; i = 0 <= max ? ++_i : --_i) {
        this.fitEles[i].style.left = this.mcList[i].cx + l - this.mcList[i].offsetWidth / 2 + 'px';
        this.fitEles[i].style.top = this.mcList[i].cy + t - this.mcList[i].offsetHeight / 2 + 'px';
        this.fitEles[i].style.fontSize = Math.ceil(12 * this.mcList[i].scale / 2) + 8 + 'px';
        this.fitEles[i].style.filter = "alpha(opacity=" + 100 * this.mcList[i].alpha + ")";
        _results.push(this.fitEles[i].style.opacity = this.mcList[i].alpha);
      }
      return _results;
    };

    fitball.prototype.depthSort = function() {
      var i, l, tmp, _i, _j, _results;
      tmp = [];
      l = this.fitEles.length;
      for (i = _i = 0; 0 <= l ? _i < l : _i > l; i = 0 <= l ? ++_i : --_i) {
        tmp.push(this.fitEles[i]);
      }
      tmp.sort(function(a, b) {
        if (a.cz > b.cz) {
          return -1;
        } else if (a.cz < b.cz) {
          return 1;
        } else {
          return 0;
        }
      });
      _results = [];
      for (i = _j = 0; 0 <= l ? _j < l : _j > l; i = 0 <= l ? ++_j : --_j) {
        _results.push(tmp[i].style.zIndex = i);
      }
      return _results;
    };

    fitball.prototype.sineCosine = function(a, b, c) {
      this.sa = Math.sin(a * this.dtr);
      this.ca = Math.cos(a * this.dtr);
      this.sb = Math.sin(b * this.dtr);
      this.cb = Math.cos(b * this.dtr);
      this.sc = Math.sin(c * this.dtr);
      return this.cc = Math.cos(c * this.dtr);
    };

    fitball.prototype.positionAll = function() {
      var fragment, i, max, phi, theta, tmp, _i, _j, _k, _ref, _ref1, _ref2, _results;
      phi = 0;
      theta = 0;
      max = this.mcList.length;
      fragment = document.createDocumentFragment();
      tmp = [];
      for (i = _i = 0, _ref = this.fitEleLength; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        tmp.push(this.fitEles[i]);
      }
      tmp.sort(function() {
        var _ref1;
        return (_ref1 = Math.random() < 0.5) != null ? _ref1 : {
          1: -1
        };
      });
      for (i = _j = 0, _ref1 = this.fitEleLength; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        fragment.appendChild(tmp[i]);
      }
      this.vessel.appendChild(fragment);
      _results = [];
      for (i = _k = 1, _ref2 = max + 1; 1 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 1 <= _ref2 ? ++_k : --_k) {
        phi = Math.acos(-1 + (2 * i - 1) / max);
        theta = Math.sqrt(max * Math.PI) * phi;
        this.mcList[i - 1].cx = this.radius * Math.cos(theta) * Math.sin(phi);
        this.mcList[i - 1].cy = this.radius * Math.sin(theta) * Math.sin(phi);
        this.mcList[i - 1].cz = this.radius * Math.cos(phi);
        this.fitEles[i - 1].style.left = this.mcList[i - 1].cs + this.vessel.offsetWidth / 2 - this.mcList[i - 1].offsetWidth / 2 + 'px';
        _results.push(this.fitEles[i - 1].style.top = this.mcList[i - 1].cy + this.vessel.offsetHeight / 2 - this.mcList[i - 1].offsetHeight / 2 + 'px');
      }
      return _results;
    };

    return fitball;

  })();

  window.onload = function() {
    var fb;
    fb = new fitball;
    return fb.roll();
  };

}).call(this);
