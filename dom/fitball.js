// Generated by CoffeeScript 1.4.0
(function() {
  var fitball,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fitball = (function() {

    function fitball() {
      this.update = __bind(this.update, this);

    }

    fitball.prototype.init = function() {
      this.radius = 120;
      this.size = 250;
      this.tsSpeed = 10;
      this.dtr = Math.PI / 180;
      this.d = 300;
      this.elliptical = 1;
      this.srcHash = {};
      this.vessel = null;
      this.fits = [];
      this.mcList = [];
      this.length = 0;
      this.active = false;
      this.animate = true;
      this.mouse = {};
      this.lasta = 1;
      this.lastb = 1;
      this.trigs = {};
      this.max = 0;
      return this.min = 10000;
    };

    fitball.prototype.roll = function() {
      this.init();
      this.readSrc();
      this.initDoms();
      this.unbindEvents();
      return this.goRoll();
    };

    fitball.prototype.unbindEvents = function() {
      this.vessel.onmouseover = null;
      this.vessel.onmouseout = null;
      this.vessel.onmousemove = null;
      window.onkeyup = null;
      if (typeof this.si !== 'undefined') {
        clearInterval(this.si);
      }
      return true;
    };

    fitball.prototype.readSrc = function() {
      var i, num, source, srcArr, srcStr, srcTxt, word, _i, _ref, _ref1;
      source = document.getElementById('source');
      srcTxt = source.value;
      srcArr = srcTxt.split("\n");
      for (i = _i = 0, _ref = srcArr.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        srcStr = srcArr[i].trim();
        if (srcStr === "") {
          continue;
        } else {
          _ref1 = srcStr.split(','), word = _ref1[0], num = _ref1[1];
          num = num || 1;
          if (typeof this.srcHash[word] === 'undefined') {
            this.srcHash[word] = 0;
          }
          this.srcHash[word] += parseInt(num);
          if (this.max < this.srcHash[word]) {
            this.max = this.srcHash[word];
          }
          if (this.min > this.srcHash[word]) {
            this.min = this.srcHash[word];
          }
        }
      }
      return true;
    };

    fitball.prototype.initDoms = function() {
      var a, distance, fragment, k, scale, v, _ref;
      fragment = document.createDocumentFragment();
      distance = this.max - this.min;
      _ref = this.srcHash;
      for (k in _ref) {
        v = _ref[k];
        a = document.createElement('a');
        a.innerHTML = k;
        if (distance === 0) {
          scale = 1;
        } else {
          scale = Math.sin(Math.PI / 6 + Math.PI * (v - this.min) / (3 * distance)) + 0.25;
        }
        a.scale = scale;
        fragment.appendChild(a);
      }
      this.vessel = document.getElementById('vessel');
      this.vessel.innerHTML = '';
      this.vessel.appendChild(fragment);
      return true;
    };

    fitball.prototype.goRoll = function() {
      var fits, i, length, mcList, stay, tag, _i,
        _this = this;
      this.fits = fits = this.vessel.getElementsByTagName('a');
      this.length = length = fits.length;
      this.mcList = mcList = [];
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        tag = {};
        tag.offsetWidth = fits[i].offsetWidth;
        tag.offsetHeight = fits[i].offsetHeight;
        mcList.push(tag);
      }
      this.positionAll();
      this.vessel.onmouseover = function() {
        return _this.active = true;
      };
      this.vessel.onmouseout = function() {
        return _this.active = false;
      };
      this.vessel.onmousemove = function(e) {
        e = window.event || e;
        _this.mouse.x = (e.clientX - (_this.vessel.offsetLeft + _this.vessel.offsetWidth / 2)) / 5;
        return _this.mouse.y = (e.clientY - (_this.vessel.offsetTop + _this.vessel.offsetHeight / 2)) / 5;
      };
      this.si = setInterval(this.update, 30);
      stay = false;
      window.onkeyup = function(e) {
        var kc;
        e = window.event || e;
        kc = e.keyCode || e.keyCode;
        if (kc === 32) {
          if (stay) {
            _this.si = setInterval(_this.update, 30);
            return stay = false;
          } else {
            clearInterval(_this.si);
            return stay = true;
          }
        }
      };
      return true;
    };

    fitball.prototype.update = function() {
      var a, b, c, i, length, mcList, mouse, per, radius, rx1, rx2, rx3, ry1, ry2, ry3, rz1, rz2, rz3, size, trigs, tsSpeed, _i;
      a = b = c = 0;
      mouse = this.mouse;
      size = this.size;
      radius = this.radius;
      tsSpeed = this.tsSpeed;
      length = this.length;
      mcList = this.mcList;
      if (this.active) {
        a = (-Math.min(Math.max(-mouse.y, -size), size) / radius) * tsSpeed;
        b = (Math.min(Math.max(-mouse.x, -size), size) / radius) * tsSpeed;
      } else {
        a = this.lasta * 0.98;
        b = this.lastb * 0.98;
      }
      this.lasta = a;
      this.lastb = b;
      if (Math.abs(a) <= 0.01 && Math.abs(b) <= 0.01) {
        return false;
      }
      trigs = this.sineCosine(a, b, c);
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        rx1 = mcList[i].cx;
        ry1 = mcList[i].cy * trigs.ca + mcList[i].cz * (-trigs.sa);
        rz1 = mcList[i].cy * trigs.sa + mcList[i].cz * trigs.ca;
        rx2 = rx1 * trigs.cb + rz1 * trigs.sb;
        ry2 = ry1;
        rz2 = rx1 * (-trigs.sb) + rz1 * trigs.cb;
        rx3 = rx2 * trigs.cc + ry2 * (-trigs.sc);
        ry3 = rx2 * trigs.sc + ry2 * trigs.cc;
        rz3 = rz2;
        mcList[i].cx = rx3;
        mcList[i].cy = ry3;
        mcList[i].cz = rz3;
        per = this.d / (this.d + rz3);
        mcList[i].x = (this.elliptical * rx3 * per) - (this.elliptical * 2);
        mcList[i].y = ry3 * per;
        mcList[i].scale = per;
        mcList[i].alpha = (per - 0.6) * (10 / 6);
      }
      return this.doPos();
    };

    fitball.prototype.positionAll = function() {
      var fragment, i, length, mcList, phi, radius, theta, tmp, _i, _j, _k;
      phi = theta = i = 0;
      length = this.length;
      tmp = [];
      mcList = this.mcList;
      radius = this.radius;
      fragment = document.createDocumentFragment();
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        tmp.push(this.fits[i]);
      }
      tmp.sort(function() {
        var _ref;
        return (_ref = Math.random() < 0.5) != null ? _ref : {
          1: -1
        };
      });
      for (i = _j = 0; 0 <= length ? _j < length : _j > length; i = 0 <= length ? ++_j : --_j) {
        fragment.appendChild(tmp[i]);
      }
      this.vessel.appendChild(fragment);
      for (i = _k = 0; 0 <= length ? _k < length : _k > length; i = 0 <= length ? ++_k : --_k) {
        phi = Math.acos(-1 + (2 * i) / length);
        theta = Math.sqrt(length * Math.PI) * phi;
        mcList[i].cx = radius * Math.cos(theta) * Math.sin(phi);
        mcList[i].cy = radius * Math.sin(theta) * Math.sin(phi);
        mcList[i].cz = radius * Math.cos(phi);
        this.fits[i].style.left = mcList[i].cx + this.vessel.offsetWidth / 2 - mcList[i].offsetWidth / 2 + "px";
        this.fits[i].style.top = mcList[i].cy + this.vessel.offsetHeight / 2 - mcList[i].offsetHeight / 2 + "px";
      }
      return true;
    };

    fitball.prototype.sineCosine = function(a, b, c) {
      this.trigs.sa = Math.sin(a * this.dtr);
      this.trigs.ca = Math.cos(a * this.dtr);
      this.trigs.sb = Math.sin(b * this.dtr);
      this.trigs.cb = Math.cos(b * this.dtr);
      this.trigs.sc = Math.sin(c * this.dtr);
      this.trigs.cc = Math.cos(c * this.dtr);
      return this.trigs;
    };

    fitball.prototype.doPos = function() {
      var i, l, mcList, t, _i, _ref;
      l = this.vessel.offsetWidth / 2;
      t = this.vessel.offsetHeight / 2;
      mcList = this.mcList;
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.fits[i].style.left = mcList[i].cx + l - mcList[i].offsetWidth / 2 + 'px';
        this.fits[i].style.top = mcList[i].cy + t - mcList[i].offsetHeight / 2 + 'px';
        this.fits[i].style.fontSize = (Math.ceil(12 * mcList[i].scale / 2) + 8) * this.fits[i].scale + 'px';
        this.fits[i].style.filter = "alpha(opacity=" + 100 * mcList[i].alpha + ")";
        this.fits[i].style.opacity = mcList[i].alpha;
      }
      return true;
    };

    return fitball;

  })();

  window.onload = function() {
    var fb, gen;
    fb = new fitball();
    gen = document.getElementById('gen');
    gen.onclick = function() {
      return fb.roll();
    };
    return gen.click();
  };

}).call(this);
